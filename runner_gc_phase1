#!/usr/bin/env python3

import sys
sys.path.insert(0, '../secure-edit-distance')
from math import ceil, log2

from Compiler.library import print_ln
from Compiler.GC.types import sbitint

from load_sequences import *
from preprocess import equality_gc
from t_optimize import *

program.use_edabit(True)

# m, n = int(sys.argv[-2]), int(sys.argv[-1])
m, n = 2041, 2041

bitlen = ceil(log2(max(m, n)))
program.set_bit_length(bitlen)

cc0, minct0 = 0, 0
gc_i = sbitint.get_type(bitlen)
res = gc_i(0)

a, b = load_sequences_gc(m, n, 1)
m, n = len(a), len(b)
print("MN", m, n)

# Naive approach
# t = ceil(max(m, n)/10) // 2 * 2 + 1

# New approach
tt = 103 # Loose upper threshold
E, cc0 = equality_gc(a, b, tt)

modval = 48 # Segment length
bitlengths = [bitlen, ceil(log2(tt))]
res_approx, cc1, minct0, mvees = find_opt_diag_gc(E, tt, modval, bitlengths)
print_ln('Approx RES: %s', res_approx.reveal())

print("Comparisions:",  cc0)
print("Minimums:", minct0)